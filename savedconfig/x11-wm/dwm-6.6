/* See LICENSE file for copyright and license details. */

#include <X11/XF86keysym.h>

/* appearance */
static const unsigned int borderpx = 0; /* border pixel of windows */
static const unsigned int snap     = 5; /* snap pixel */
static const int showbar           = 1; /* 0 means no bar */
static const int topbar            = 0; /* 0 means bottom bar */
static const char *fonts[]         = { "terminus:size=12" };
static const char dmenufont[]      = "terminus:size=12";
static const char col_gray1[]      = "#222222";
static const char col_gray2[]      = "#444444";
static const char col_gray3[]      = "#bbbbbb";
static const char col_gray4[]      = "#eeeeee";
static const char col_cyan[]       = "#005577";
static const char *colors[][3]     = {
	/*               fg         bg         border   */
	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
	[SchemeTabActive]   = { col_gray2, col_gray3,  col_gray2 },
	[SchemeTabInactive] = { col_gray1, col_gray3,  col_gray1 }
};

/* tagging */
static const char *tags[] = { "1", "2" };

static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 */
	/* class     instance  title     tags mask  isfloating  monitor */
	{ NULL,      NULL,     NULL,     0,         0,          -1 },
};

/* layout(s) */
static const float mfact        = 0.5; /* factor of master area size [0.05..0.95] */
static const int nmaster        = 1;   /* number of clients in master area */
static const int resizehints    = 0;   /* 1 means respect size hints in tiled resizals */
static const int decorhints     = 1;   /* 1 means respect decoration hints */
static const int lockfullscreen = 1;   /* 1 will force focus on the fullscreen window */

/* Bartabgroups properties */
#define BARTAB_BORDERS 1       // 0 = off, 1 = on
#define BARTAB_BOTTOMBORDER 0  // 0 = off, 1 = on
#define BARTAB_TAGSINDICATOR 1 // 0 = off, 1 = on if >1 client/view tag, 2 = always on
#define BARTAB_TAGSPX 5        // # pixels for tag grid boxes
#define BARTAB_TAGSROWS 1      // # rows in tag grid (9 tags, e.g. 3x3)
static void (*bartabmonfns[])(Monitor *) = { monocle /* , customlayoutfn */ };
static void (*bartabfloatfns[])(Monitor *) = { NULL /* , customlayoutfn */ };

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "[M]",      monocle },
	{ "><>",      NULL },    /* no layout function means floating behavior */
	{ "[]=",      tile },    /* first entry is default */
};

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY, view,       {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY, toggleview, {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY, tag,        {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY, toggletag,  {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
/* #define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } } */

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[] = {
	"dmenu_run",
	"-b",
	"-m", dmenumon,
	"-fn", dmenufont,
	"-nb", col_gray1,
	"-nf", col_gray3,
	"-sf", col_gray4,
	"-sb", col_cyan,
	NULL
};
static const char *termcmd[]       = { "term-emulator", NULL };
static const char *file_manager[]  = { "file-browser", NULL };
static const char *www_client[]    = { "www-browser", NULL };
static const char *emoji_handler[] = { "emoji-picker", NULL };

/* screenshooting */
static const char *screenshot_area_clip[] = { "screenshot.sh", "clipboard", "select" , NULL };
static const char *screenshot_area_file[] = { "screenshot.sh", "file", "select", NULL };
static const char *screenshot_wind_clip[] = { "screenshot.sh", "clipboard", "window", NULL };
static const char *screenshot_wind_file[] = { "screenshot.sh", "file", "window", NULL };
static const char *screenshot_scrn_clip[] = { "screenshot.sh", "clipboard", "screen", NULL };
static const char *screenshot_scrn_file[] = { "screenshot.sh", "file", "screen", NULL };

/* volume control */
static const char *upvol[]   = { "volumeset.sh", "inc", "@DEFAULT_AUDIO_SINK@", NULL };
static const char *downvol[] = { "volumeset.sh", "dec", "@DEFAULT_AUDIO_SINK@", NULL };
static const char *mutevol[] = { "volumeset.sh", "tgl", "@DEFAULT_AUDIO_SINK@", NULL };

static const Key keys[] = {
	/* modifier           key                      function        argument */
	{ MODKEY,             XK_r,                    spawn,          {.v = dmenucmd} },
	{ MODKEY,             XK_Return,               spawn,          {.v = termcmd} },
	{ MODKEY,             XK_b,                    togglebar,      {0} },
	{ MODKEY,             XK_j,                    focusstack,     {.i = +1} },
	{ MODKEY,             XK_k,                    focusstack,     {.i = -1} },
	{ MODKEY,             XK_i,                    incnmaster,     {.i = +1} },
	{ MODKEY,             XK_d,                    incnmaster,     {.i = -1} },
	{ MODKEY,             XK_h,                    setmfact,       {.f = -0.01} },
	{ MODKEY,             XK_l,                    setmfact,       {.f = +0.01} },
	{ MODKEY|ShiftMask,   XK_Return,               zoom,           {0} },
	{ MODKEY,             XK_Tab,                  view,           {0} },
	{ MODKEY|ShiftMask,   XK_c,                    killclient,     {0} },
	{ MODKEY,             XK_m,                    setlayout,      {.v = &layouts[0]} },
	{ MODKEY,             XK_f,                    setlayout,      {.v = &layouts[1]} },
	{ MODKEY,             XK_t,                    setlayout,      {.v = &layouts[2]} },
	{ MODKEY,             XK_space,                setlayout,      {0} },
	{ MODKEY|ShiftMask,   XK_space,                togglefloating, {0} },
	{ MODKEY,             XK_0,                    view,           {.ui = ~0} },
	{ MODKEY|ShiftMask,   XK_0,                    tag,            {.ui = ~0} },
	{ MODKEY,             XK_comma,                focusmon,       {.i = -1} },
	{ MODKEY,             XK_period,               focusmon,       {.i = +1} },
	{ MODKEY|ShiftMask,   XK_comma,                tagmon,         {.i = -1} },
	{ MODKEY|ShiftMask,   XK_period,               tagmon,         {.i = +1} },
	{ 0,                  XF86XK_AudioRaiseVolume, spawn,          {.v = upvol  } },
	{ 0,                  XF86XK_AudioLowerVolume, spawn,          {.v = downvol} },
	{ 0,                  XF86XK_AudioMute,        spawn,          {.v = mutevol} },
	{ 0,                  XK_Print,                spawn,          {.v = screenshot_area_clip} },
	{ ShiftMask,          XK_Print,                spawn,          {.v = screenshot_area_file} },
	{ Mod1Mask,           XK_Print,                spawn,          {.v = screenshot_wind_clip} },
	{ Mod1Mask|ShiftMask, XK_Print,                spawn,          {.v = screenshot_wind_file} },
	{ Mod4Mask,           XK_Print,                spawn,          {.v = screenshot_scrn_clip} },
	{ Mod4Mask|ShiftMask, XK_Print,                spawn,          {.v = screenshot_scrn_file} },
	{ MODKEY,             XK_e,                    spawn,          {.v = file_manager} },
	{ MODKEY,             XK_w,                    spawn,          {.v = www_client} },
	{ MODKEY,             XK_period,               spawn,          {.v = emoji_handler} },
	{ MODKEY|ShiftMask,   XK_q,                    quit,           {0} },
	TAGKEYS(              XK_1,                    0)
	TAGKEYS(              XK_2,                    1)
};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static const Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};
